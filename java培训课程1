一、java环境搭建
1.jdk
----->了解目录结构
   ---->bin
   ---->src.zip
   ---->lib目录下是jar包
   ---->jre  运行环境
        ---->lib/rt.jar
------>一个java应用程序
   ------>类名一般就是文件名，如果类是public 类名就必须是文件名。
   ------>一般来说一个类就是一个文件。
   ----->编译
         ---->javac命令
	 ---->设置环境变量path
	 ---->进入.java文件所在的目录
	 ---->javac 文件名.java
	      ---->产生.class --->java字节码（包含了javacpu-->jvm的指令)
         
  ------>运行
       ---->java 类名
       ---->classpath环境变量
             ----->寻找类的路径
	     ----->默认是点代表当前目录
	---->jvm类加载机制
	     ----->jvm是通过类加载器机制加载类的
	         ----->根类加载器
		      ----->负责加载jre/lib/rt.jar中的类
		 ----->扩展类加载器
		      ----->负责加载jre/lib/ext/*.jar中的类
		 ----->应用类加载器
		       ---->负责加载classpath下能找到的类
	    ------>加载类的时候总是先从根类加载器找类，没有才去扩展类加载器，扩展没有才去应用类加载器

------->包的概念  
    ----->包名是类名的一部分
     ---->javac -d . 类名.java    自动生成包。


------->eclipse工具
   ----->先安装jdk
   ----->下载eclipse (for jee)



二、java语法基础
1.数据类型是强类型的
2.数组
3.在哪个{}声明的作用域就在哪个{}内

三、java的面向对象
----->类
   ------>相同属性（变量）、相似行为（函数）的抽象
   ------>抽取人类
       ----->h,w
       ----->eat(),walk()
    ----->抽取钟类
       ----->h,m,s
       ----->showTime();
         
----->对象
    ----->类的实例
----->构造函数
     ----->函数名与类名相同，无任何返回类型
     ----->创建对象的时候会自动调用，创建一次对象就会调用一次
     ----->一般是用来给成员变量进行初始化的
     ----->如果没有给出构造函数，jvm会给一个默认的无参数的构造函数
             public 类名(){}
	     一旦给了构造函数这个默认无参数的就不存在了。

----->函数重载
    ----->同一个类中的一组函数，函数名称相同
    ------>形式参数不同
    ------>与返回值类型无关
    ------>把这样的一组函数称为函数重载
    ------>调用的时候会根据参数的类型和个数自动匹配决定调用哪个函数
         ---->这种匹配先找最精确的，如果没有找匹配得上的。
   ------>补充：可变参数，可变参数必须是参数的最后一个，当做数组处理

------->访问权限
    ----->public 
           ---->修饰类和成员
	   ---->在不同包下访问
    ----->默认的
          ----->修饰类和成员
	  ----->在同一包下访问
    ----->private 
          ----->只能在类的内部访问
	  ----->一般用来修饰成员变量
------>this引用
     ----->当前对象（的引用）
     ----->调用这个函数的那个对象（的引用）
     ----->非静态的成员函数访问非静态的成员都省略了
     ----->this(参数）
          ----->调用重载的另外一个构造函数

------>初始化的问题
     ------>给成员变量直接初始化就是定义初始化
           ----->先定义初始化再构造函数 
     ------>静态的成员变量
           ---->所有对象公用一份
	   ---->可以通过对象.访问(不建议），也可以类.访问
     ------>静态定义初始化（静态定义初始化块）
          ----->用到一个类就会加载器静态成员属性
	  ----->且只加载一次
     ------>静态的成员函数
          ---->可以使用类名直接调用，对象调用也可以不建议
	  ---->静态的成员函数只能访问静态的成员
  ----->练习1：写一个矩形类（左上角坐标，宽度、高度）
                       判断一个点是不是在矩形内
		       求面积、求周长，让使用者更方便的使用


------->继承
   ----->体现代码的复用
   ----->使用extends关键字
   ----->子类的构造函数会去掉用父类的构造函数
           ----->如果没有显示去调用父类的构造函数，默认就调用父类无参数的构造函数
   ----->方法的重写or覆盖
   ----->动态绑定
         ----->父类的引用引用了子类的对象
	      --->面向对象的语言都可以是父类的引用引用任何子类的实例
	  ----->调用方法的时候，如果方法构成重写，调用子类的方法。
   ----->java中只能单一继承，java中的继承具有传递性
        ---->java中如果一个类没有父类，父类就是Object
	   ----->java.lang.Object类是一起类的父类
  ------>总体的初始化顺序（有父类有子类）
       ----->用到类先父类静态，再子类静态且只一次
       ----->然后是父类的定义初始化，父类的构造函数
       ----->最后是子类的定义初始化，子类的构造函数

------->抽象类
     ----->抽象方法的概念
          ----->一个方法只有声明没有实现，就是抽象方法必须用abstract关键字声明
	  ----->如果一个类中有抽象方法，那么该类就是抽象类，必须用abstract声明
      ---->抽象类不能直接实例化，但是可以实例化子类的对象



总结:
----->环境搭建
    ----->用记事本写代码测试classpath环境变量，包，访问权限。
----->java的数据类型
   ------>基本数据类型     char,boolean,其它
   ------>数组的使用
   ------>可变参数
------>函数重载
------>类和对象
   ----->构造函数
   ----->构造函数的重载
   ----->this引用
   ----->定义初始化（定义初始化块）
   ----->静态成员变量
          ----->静态定义初始化
	  ---->静态定义初始化块
    ----->静态成员函数

------->继承
    ----->继承中的构造函数问题
    ----->方法重写（覆盖）
    ----->动态绑定
    ----->初始化顺序

------->抽象类

------->eclipse
         ---->快捷键   alt+/
	 ---->导入项目
	      --->File--->import---->General---->Existing projects into..--->bowser--->选中项目--->确定--->finish
	      --->如果jre报错
	         ---->右击项目--->Properties---->Java Builder Path--->右边选项卡选择Libraries--->选中jre----->remove
		 ---->add lib --->Jre system lib---->next--->... 

